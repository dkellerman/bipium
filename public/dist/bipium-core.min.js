var Bipium=function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=0)}({"./node_modules/regenerator-runtime/runtime.js":function(module,exports,__webpack_require__){eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, "");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, "constructor", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    "GeneratorFunction"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, "GeneratorFunction");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, "Generator");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, "toString", function() {\n    return "[object Generator]";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === "object") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function("r", "regeneratorRuntime = r")(runtime);\n  }\n}\n\n\n//# sourceURL=webpack://Bipium/./node_modules/regenerator-runtime/runtime.js?')},"./src/core/Clicker.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_SOUNDS", function() { return DEFAULT_SOUNDS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Clicker", function() { return Clicker; });\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DEFAULT_SOUNDS = {\n  name: \'Defaults\',\n  bar: 880.0,\n  beat: 440.0,\n  subDiv: [220.0, .5],\n  user: 660.0\n};\nvar Clicker = /*#__PURE__*/function () {\n  function Clicker(_ref) {\n    var audioContext = _ref.audioContext,\n        _ref$volume = _ref.volume,\n        volume = _ref$volume === void 0 ? 100 : _ref$volume,\n        _ref$sounds = _ref.sounds,\n        sounds = _ref$sounds === void 0 ? DEFAULT_SOUNDS : _ref$sounds,\n        _ref$defaultClickLeng = _ref.defaultClickLength,\n        defaultClickLength = _ref$defaultClickLeng === void 0 ? 0.05 : _ref$defaultClickLeng;\n\n    _classCallCheck(this, Clicker);\n\n    this.audioContext = audioContext;\n    this.volume = volume;\n    this.clickLength = defaultClickLength;\n    this.loading = false;\n    this.gainNode = this.audioContext.createGain();\n    this.gainNode.connect(this.audioContext.destination);\n    this.setSounds(sounds);\n  }\n\n  _createClass(Clicker, [{\n    key: "setSounds",\n    value: function () {\n      var _setSounds = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(sounds) {\n        var result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.fetchSounds(sounds);\n\n              case 2:\n                result = _context.sent;\n                this.sounds = result;\n\n              case 4:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setSounds(_x) {\n        return _setSounds.apply(this, arguments);\n      }\n\n      return setSounds;\n    }()\n  }, {\n    key: "fetchSounds",\n    value: function () {\n      var _fetchSounds = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(sounds) {\n        var k, _sounds$k, sound;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.loading = true;\n                _context2.t0 = regeneratorRuntime.keys(sounds);\n\n              case 2:\n                if ((_context2.t1 = _context2.t0()).done) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                k = _context2.t1.value;\n\n                if (!(k === \'name\')) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt("continue", 2);\n\n              case 6:\n                if (!Array.isArray(sounds[k])) sounds[k] = [sounds[k], 1.0];\n                _sounds$k = _slicedToArray(sounds[k], 1), sound = _sounds$k[0];\n\n                if (!(typeof sound === \'string\')) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.next = 11;\n                return fetchAudioBuffer(this.audioContext, sound);\n\n              case 11:\n                sounds[k][0] = _context2.sent;\n\n              case 12:\n                _context2.next = 2;\n                break;\n\n              case 14:\n                this.loading = false;\n                return _context2.abrupt("return", sounds);\n\n              case 16:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetchSounds(_x2) {\n        return _fetchSounds.apply(this, arguments);\n      }\n\n      return fetchSounds;\n    }()\n  }, {\n    key: "setVolume",\n    value: function setVolume(volume) {\n      this.volume = volume;\n    }\n  }, {\n    key: "scheduleClickSound",\n    value: function scheduleClickSound(_ref2) {\n      var time = _ref2.time,\n          subDiv = _ref2.subDiv,\n          beat = _ref2.beat,\n          beats = _ref2.beats;\n      // console.log(\'sch click\', beat, subDiv, this.volume);\n      if (this.loading) return;\n      var sound;\n      var sounds = this.sounds;\n\n      if (beat === 1 && subDiv === 1) {\n        sound = sounds.bar || sounds.beat;\n      } else if (beat === beats / 2 + 1 && subDiv === 1) {\n        sound = sounds.half || sounds.beat;\n      } else if (beat > 1 && subDiv === 1) {\n        sound = sounds.beat;\n      } else {\n        sound = sounds.subDiv || sounds.beat;\n      }\n\n      var relativeVolume = 1.0;\n\n      if (Array.isArray(sound)) {\n        var _sound = sound;\n\n        var _sound2 = _slicedToArray(_sound, 2);\n\n        sound = _sound2[0];\n        relativeVolume = _sound2[1];\n      }\n\n      var audioObj = this.playSoundAt(sound, time, this.clickLength, relativeVolume);\n      return audioObj;\n    }\n  }, {\n    key: "removeClickSound",\n    value: function removeClickSound(click) {\n      var _click$obj;\n\n      click === null || click === void 0 ? void 0 : (_click$obj = click.obj) === null || _click$obj === void 0 ? void 0 : _click$obj.stop(0);\n    }\n  }, {\n    key: "playSoundAt",\n    value: function playSoundAt(sound, time, clickLength) {\n      var relativeVolume = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.0;\n      var audioNode;\n\n      if (typeof sound === \'number\') {\n        // freq\n        audioNode = this.audioContext.createOscillator();\n        audioNode.connect(this.gainNode);\n        audioNode.frequency.value = sound;\n        audioNode.start(time);\n        audioNode.stop(time + clickLength);\n      } else {\n        // buffer\n        audioNode = this.audioContext.createBufferSource();\n\n        try {\n          audioNode.buffer = sound;\n        } catch (e) {\n          console.error(e);\n        }\n\n        audioNode.connect(this.gainNode);\n        audioNode.start(time, 0, clickLength);\n      }\n\n      this.gainNode.gain.setValueAtTime(this.volume * relativeVolume / 100, time);\n      return audioNode;\n    }\n  }, {\n    key: "click",\n    value: function click() {\n      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.playSoundAt(this.sounds.user, t, this.clickLength);\n    }\n  }]);\n\n  return Clicker;\n}();\n\nfunction fetchAudioBuffer(_x3, _x4) {\n  return _fetchAudioBuffer.apply(this, arguments);\n}\n\nfunction _fetchAudioBuffer() {\n  _fetchAudioBuffer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(audioContext, filepath) {\n    var response, arrayBuffer, audioBuffer;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetch(filepath);\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return response.arrayBuffer();\n\n          case 5:\n            arrayBuffer = _context3.sent;\n            _context3.next = 8;\n            return audioContext.decodeAudioData(arrayBuffer);\n\n          case 8:\n            audioBuffer = _context3.sent;\n            return _context3.abrupt("return", audioBuffer);\n\n          case 10:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _fetchAudioBuffer.apply(this, arguments);\n}\n\n//# sourceURL=webpack://Bipium/./src/core/Clicker.js?')},"./src/core/Metronome.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Metronome", function() { return Metronome; });\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Metronome = /*#__PURE__*/function () {\n  function Metronome() {\n    var _this = this;\n\n    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Metronome);\n\n    var timerFn = settings.timerFn,\n        clicker = settings.clicker,\n        _settings$bpm = settings.bpm,\n        bpm = _settings$bpm === void 0 ? 80 : _settings$bpm,\n        _settings$beats = settings.beats,\n        beats = _settings$beats === void 0 ? 4 : _settings$beats,\n        _settings$subDivs = settings.subDivs,\n        subDivs = _settings$subDivs === void 0 ? 1 : _settings$subDivs,\n        _settings$swing = settings.swing,\n        swing = _settings$swing === void 0 ? 0 : _settings$swing,\n        _settings$workerUrl = settings.workerUrl,\n        workerUrl = _settings$workerUrl === void 0 ? null : _settings$workerUrl,\n        _settings$onNextClick = settings.onNextClick,\n        onNextClick = _settings$onNextClick === void 0 ? function () {} : _settings$onNextClick,\n        _settings$onUnschedul = settings.onUnscheduleClick,\n        onUnscheduleClick = _settings$onUnschedul === void 0 ? function () {} : _settings$onUnschedul,\n        _settings$onStart = settings.onStart,\n        onStart = _settings$onStart === void 0 ? function () {} : _settings$onStart,\n        _settings$onStop = settings.onStop,\n        onStop = _settings$onStop === void 0 ? function () {} : _settings$onStop,\n        _settings$onScheduler = settings.onSchedulerTick,\n        onSchedulerTick = _settings$onScheduler === void 0 ? function () {} : _settings$onScheduler,\n        _settings$lookaheadIn = settings.lookaheadInterval,\n        lookaheadInterval = _settings$lookaheadIn === void 0 ? 0.025 : _settings$lookaheadIn,\n        _settings$scheduleAhe = settings.scheduleAheadTime,\n        scheduleAheadTime = _settings$scheduleAhe === void 0 ? 0.1 : _settings$scheduleAhe,\n        _settings$startDelayT = settings.startDelayTime,\n        startDelayTime = _settings$startDelayT === void 0 ? .1 : _settings$startDelayT;\n    this.onStart = onStart;\n    this.onStop = onStop;\n    this.onNextClick = onNextClick;\n    this.onUnscheduleClick = onUnscheduleClick;\n    this.onSchedulerTick = onSchedulerTick;\n    this.timerFn = timerFn;\n    this.clicker = clicker;\n    this.lookaheadInterval = lookaheadInterval;\n    this.scheduleAheadTime = scheduleAheadTime;\n    this.startDelayTime = startDelayTime;\n    this.bpm = bpm;\n    this.beats = beats;\n    this.subDivs = subDivs;\n    this.swing = swing;\n    this.started = false; // prep the thread timer\n\n    if (workerUrl) {\n      this.worker = new Worker(workerUrl);\n    } else {\n      this.worker = new MetronomeWorker();\n    }\n\n    this.worker.onmessage = function (e) {\n      if (e.data === \'tick\') {\n        _this.scheduler();\n\n        _this.onSchedulerTick();\n      }\n    };\n\n    this.worker.postMessage({\n      interval: this.lookaheadInterval\n    });\n  }\n\n  _createClass(Metronome, [{\n    key: "start",\n    value: function start() {\n      var _this$clicker, _this$clicker$audioCo;\n\n      if (this.started) return;\n      this.startTime = this.now + this.startDelayTime;\n      this.stopTime = null;\n      this.started = true;\n      this.scheduledClicks = [];\n      if (this.subDivs % 2 > 0) this.swing = 0;\n      this.next = {\n        bar: 1,\n        beat: 1,\n        subDiv: 1,\n        time: this.startTime\n      };\n      this.worker.postMessage(\'start\');\n      this.onStart();\n\n      if (((_this$clicker = this.clicker) === null || _this$clicker === void 0 ? void 0 : (_this$clicker$audioCo = _this$clicker.audioContext) === null || _this$clicker$audioCo === void 0 ? void 0 : _this$clicker$audioCo.state) === \'suspended\') {\n        this.clicker.audioContext.resume();\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (!this.started) return;\n      this.stopTime = this.now;\n      this.started = false;\n      this.worker.postMessage(\'stop\');\n      this.unscheduleClicks();\n      this.onStop();\n    }\n  }, {\n    key: "update",\n    value: function update(_ref) {\n      var bpm = _ref.bpm,\n          beats = _ref.beats,\n          subDivs = _ref.subDivs,\n          swing = _ref.swing;\n      this.unscheduleClicks();\n      if (bpm !== undefined) this.bpm = bpm;\n      if (beats !== undefined) this.beats = beats;\n      if (subDivs !== undefined) this.subDivs = subDivs;\n      if (swing !== undefined) this.swing = swing; // recalculate next scheduled beat if bar structure has changed\n\n      if ((bpm !== undefined || beats !== undefined) && this.started && this.scheduledClicks.length) {\n        this.next = _objectSpread({}, this.lastClick);\n\n        while (this.next.time <= this.now - this.subDivTime) {\n          this.next.time += this.subDivTime;\n        }\n\n        this.advance();\n      }\n    } // main method called by the thread timer when started\n\n  }, {\n    key: "scheduler",\n    value: function scheduler() {\n      if (!this.started) return;\n\n      while (this.next.time < this.now + this.scheduleAheadTime) {\n        this.scheduleClick();\n        this.advance(); // updates this.next.time\n      }\n    }\n  }, {\n    key: "scheduleClick",\n    value: function scheduleClick() {\n      var _this$clicker2;\n\n      var click = _objectSpread(_objectSpread({}, this.next), {}, {\n        beats: this.beats,\n        subDivs: this.subDivs\n      }); // notify clicker to schedule the actual sound - it returns a sound object\n      // that we keep around so that if it needs to be cancelled it can be passed\n      // to the onUnscheduleClick method\n\n\n      var obj = (_this$clicker2 = this.clicker) === null || _this$clicker2 === void 0 ? void 0 : _this$clicker2.scheduleClickSound(click);\n      this.onNextClick(click);\n      this.scheduledClicks.push(_objectSpread(_objectSpread({}, click), {}, {\n        obj: obj\n      })); // remove old clicks from memory\n\n      var now = this.now;\n      this.scheduledClicks = this.scheduledClicks.filter(function (c) {\n        return (c === null || c === void 0 ? void 0 : c.time) >= now - 10.0;\n      });\n    }\n  }, {\n    key: "advance",\n    value: function advance() {\n      // calculate next click time\n      var delta = this.beatTime / this.subDivs;\n\n      if (this.next.subDiv % 2 === 1) {\n        delta += delta * (this.swing / 100.0);\n      } else {\n        delta *= (100.0 - this.swing) / 100.0;\n      } // advance time\n\n\n      this.next.time += delta; // advance beat counter\n\n      if (this.next.subDiv % this.subDivs === 0) {\n        this.next.subDiv = 1;\n        this.next.beat++;\n\n        if (this.next.beat > this.beats) {\n          this.next.beat = 1;\n          this.next.bar++;\n        }\n      } else {\n        this.next.subDiv++;\n      }\n    }\n  }, {\n    key: "unscheduleClicks",\n    value: function unscheduleClicks() {\n      var _this2 = this;\n\n      this.scheduledClicks = (this.scheduledClicks || []).map(function (click) {\n        if (click.time > _this2.now) {\n          var _this2$clicker;\n\n          (_this2$clicker = _this2.clicker) === null || _this2$clicker === void 0 ? void 0 : _this2$clicker.removeClickSound(click);\n\n          _this2.onUnscheduleClick(click);\n\n          return null;\n        }\n\n        return click;\n      }).filter(Boolean);\n    }\n  }, {\n    key: "now",\n    get: function get() {\n      return this.timerFn();\n    }\n  }, {\n    key: "beatTime",\n    get: function get() {\n      return 60.0 / this.bpm;\n    }\n  }, {\n    key: "subDivTime",\n    get: function get() {\n      return this.beatTime / this.subDivs;\n    }\n  }, {\n    key: "barTime",\n    get: function get() {\n      return this.beats * this.beatTime;\n    }\n  }, {\n    key: "totalSubDivs",\n    get: function get() {\n      return this.beats * this.subDivs;\n    } // relative timestamps for all sub-divisions in a bar\n\n  }, {\n    key: "gridTimes",\n    get: function get() {\n      var _this3 = this;\n\n      var swingTime = this.barTime / this.totalSubDivs * (this.swing / 100) || 0;\n      return _toConsumableArray(Array(this.totalSubDivs).keys()).map(function (i) {\n        var t = i * (_this3.barTime / _this3.totalSubDivs);\n        return i % 2 === 1 ? t + swingTime : t;\n      });\n    }\n  }, {\n    key: "elapsed",\n    get: function get() {\n      return this.now - this.startTime;\n    }\n  }, {\n    key: "lastClick",\n    get: function get() {\n      var _this$scheduledClicks,\n          _this4 = this;\n\n      var clicks = (_this$scheduledClicks = this.scheduledClicks) === null || _this$scheduledClicks === void 0 ? void 0 : _this$scheduledClicks.filter(function (c) {\n        return c.time <= _this4.now;\n      });\n      return clicks === null || clicks === void 0 ? void 0 : clicks[clicks.length - 1];\n    }\n  }, {\n    key: "getClickIndex",\n    value: function getClickIndex(click) {\n      return (click.bar - 1) * this.beats + (click.beat - 1) * this.subDivs + (click.subDiv - 1);\n    }\n  }, {\n    key: "getClickBarIndex",\n    value: function getClickBarIndex(click) {\n      return (click.beat - 1) * this.subDivs + (click.subDiv - 1);\n    } // returns adjustment required in seconds to make t fall on the nearest grid line\n    // toSubDivs - which sub division to quantize to (e.g. 4 = 16th notes)\n\n  }, {\n    key: "quantize",\n    value: function quantize(t) {\n      var _this5 = this;\n\n      var toSubDivs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var to = toSubDivs || this.subDivs;\n      var elapsed = (t - (this.startTime || 0)) % this.barTime;\n      var gridTimes = this.gridTimes.concat([this.barTime]).filter(function (_, idx) {\n        return idx % (_this5.subDivs / to) === 0;\n      });\n      var closestSubDivTime = gridTimes.reduce(function (prev, curr) {\n        return Math.abs(curr - elapsed) < Math.abs(prev - elapsed) ? curr : prev;\n      });\n      var amount = closestSubDivTime - elapsed;\n      var closestSubDiv = gridTimes.indexOf(closestSubDivTime);\n      if (closestSubDiv === this.beats * to) closestSubDiv = 0;\n      closestSubDiv++; // console.log(amount, amount > 0 ? \'early\' : \'late\', \'to\', closestSubDiv);\n\n      return [amount, closestSubDiv];\n    }\n  }]);\n\n  return Metronome;\n}(); // fallback worker, but should use worker.js instead in thread\n\nvar MetronomeWorker = /*#__PURE__*/function () {\n  function MetronomeWorker() {\n    _classCallCheck(this, MetronomeWorker);\n\n    _defineProperty(this, "interval", void 0);\n\n    _defineProperty(this, "timer", void 0);\n  }\n\n  _createClass(MetronomeWorker, [{\n    key: "onmessage",\n    value: function onmessage() {}\n  }, {\n    key: "postMessage",\n    value: function postMessage(data) {\n      if (data.interval) {\n        this.interval = data.interval;\n        this.clearTimer();\n      } else if (data === \'start\') {\n        this.startTimer();\n        this.tick();\n      } else if (data === \'stop\') {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: "startTimer",\n    value: function startTimer() {\n      this.timer = setInterval(this.tick.bind(this), this.interval * 1000);\n    }\n  }, {\n    key: "clearTimer",\n    value: function clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.onmessage({\n        data: \'tick\'\n      });\n    }\n  }]);\n\n  return MetronomeWorker;\n}();\n\n//# sourceURL=webpack://Bipium/./src/core/Metronome.js?')},"./src/core/Visualizer.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Visualizer", function() { return Visualizer; });\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Visualizer = /*#__PURE__*/function () {\n  function Visualizer(_ref) {\n    var metronome = _ref.metronome,\n        _ref$qThreshold = _ref.qThreshold,\n        qThreshold = _ref$qThreshold === void 0 ? 0.04 : _ref$qThreshold;\n\n    _classCallCheck(this, Visualizer);\n\n    this.m = metronome;\n    this.qThreshold = qThreshold;\n  }\n\n  _createClass(Visualizer, [{\n    key: "start",\n    value: function start() {\n      this.progress = 0;\n      this.lastTime = 0;\n      this.click = this.m.lastClick || {};\n      this.count = [];\n      this.qType = null;\n      this.userClicks = [];\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.progress = 0;\n      this.count = [];\n      this.userClicks = [];\n      this.qType = null;\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      var m = this.m,\n          click = this.click,\n          lastTime = this.lastTime,\n          userClicks = this.userClicks,\n          qThreshold = this.qThreshold;\n      if (m.elapsed < 0) return;\n      var lastClick = m.lastClick || {};\n      var lastClickIdx = m.getClickIndex(lastClick);\n      var lastClickBarIdx = m.getClickBarIndex(lastClick);\n      var savedClickIdx = m.getClickIndex(click || {}) || 0; // update now line\n\n      if (lastClickIdx > savedClickIdx) {\n        this.click = lastClick;\n        this.progress = 1.0 / m.totalSubDivs * lastClickBarIdx;\n\n        if (lastClickBarIdx % 2 === 1) {\n          this.progress += 1.0 / m.totalSubDivs * (m.swing / 100);\n        }\n      } else {\n        var curProgress = this.progress;\n        var remProgress = 1.0 - curProgress;\n        var remTime = m.barTime * remProgress;\n        var perSecond = remProgress / remTime;\n        var deltaT = m.elapsed - lastTime;\n        var deltaP = deltaT * perSecond;\n        var newProgress = (curProgress + deltaP) % 1.0;\n        this.progress = newProgress;\n      }\n\n      this.lastTime = m.elapsed; // update count\n\n      var beat = lastClick.beat || 1;\n      var sub = lastClick.subDiv || 1;\n      this.count = m.subDivs > 1 ? [beat, sub] : [beat]; // show timing info for user clicks\n\n      if (userClicks.length) {\n        var t = userClicks.pop();\n\n        while (userClicks.length) {\n          userClicks.pop();\n        } // ignore old clicks\n\n\n        var _m$quantize = m.quantize(t, 1),\n            _m$quantize2 = _slicedToArray(_m$quantize, 1),\n            qAmount = _m$quantize2[0];\n\n        this.qType = getQuantizeType(qAmount, qThreshold);\n      }\n    }\n  }]);\n\n  return Visualizer;\n}();\n\nfunction getQuantizeType(q, threshold) {\n  if (q <= -1 * threshold) {\n    return \'late\';\n  } else if (q >= threshold) {\n    return \'early\';\n  } else {\n    return \'ontime\';\n  }\n}\n\n//# sourceURL=webpack://Bipium/./src/core/Visualizer.js?')},"./src/core/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createMetronome", function() { return createMetronome; });\n/* harmony import */ var _Metronome__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Metronome */ "./src/core/Metronome.js");\n/* harmony import */ var _Clicker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Clicker */ "./src/core/Clicker.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Metronome", function() { return _Metronome__WEBPACK_IMPORTED_MODULE_0__["Metronome"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Clicker", function() { return _Clicker__WEBPACK_IMPORTED_MODULE_1__["Clicker"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_SOUNDS", function() { return _Clicker__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_SOUNDS"]; });\n\n/* harmony import */ var _Visualizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Visualizer */ "./src/core/Visualizer.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Visualizer", function() { return _Visualizer__WEBPACK_IMPORTED_MODULE_2__["Visualizer"]; });\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n // utility method for creating a default metronome/clicker setup\n\nfunction createMetronome() {\n  var mSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var clickerSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var audioContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new AudioContext();\n  var clicker = new _Clicker__WEBPACK_IMPORTED_MODULE_1__["Clicker"](_objectSpread({\n    audioContext: audioContext\n  }, clickerSettings));\n  return new _Metronome__WEBPACK_IMPORTED_MODULE_0__["Metronome"](_objectSpread({\n    timerFn: function timerFn() {\n      return audioContext.currentTime;\n    },\n    clicker: clicker\n  }, mSettings));\n}\n\n\n\n\n//# sourceURL=webpack://Bipium/./src/core/index.js?')},0:function(module,exports,__webpack_require__){eval('__webpack_require__(/*! regenerator-runtime/runtime.js */"./node_modules/regenerator-runtime/runtime.js");\nmodule.exports = __webpack_require__(/*! /Users/dkellerman/misc/bipium/src/core/index.js */"./src/core/index.js");\n\n\n//# sourceURL=webpack://Bipium/multi_regenerator-runtime/runtime.js_./src/core/index.js?')}});
